const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
if (!admin.apps.length) {
  try {
    const serviceAccount = {
      projectId: "pulse-fm-84a48",
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
    };

    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });
    
    console.log('Firebase Admin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
  }
}

const db = admin.firestore();

exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ (preflight)
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç myradio24
    const trackData = JSON.parse(event.body);
    
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞:', trackData);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
    const song = trackData.song || '';
    let artist = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
    let title = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫';
    
    // –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
    if (song.includes(' - ')) {
      const parts = song.split(' - ');
      artist = parts[0].trim();
      title = parts.slice(1).join(' - ').trim();
    } else if (song.includes(' ‚Äì ')) {
      const parts = song.split(' ‚Äì ');
      artist = parts[0].trim();
      title = parts.slice(1).join(' ‚Äì ').trim();
    } else {
      title = song;
    }
    
    // –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π ID
    function createReadableId(artist, title) {
      const cleanArtist = artist.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\s]/g, '').replace(/\s+/g, '_').toLowerCase();
      const cleanTitle = title.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\s]/g, '').replace(/\s+/g, '_').toLowerCase();
      return `${cleanArtist}__${cleanTitle}`.substring(0, 50);
    }
    
    const trackId = createReadableId(artist, title);
    const now = admin.firestore.FieldValue.serverTimestamp();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –Ω–æ–≤–∏–Ω–∫–∞—Ö
    const existingNewTrack = await db.collection('new_tracks').doc(trackId).get();
    
    if (!existingNewTrack.exists) {
      // –≠—Ç–æ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫! –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤–∏–Ω–∫–∏
      await db.collection('new_tracks').doc(trackId).set({
        title: title,
        artist: artist,
        fullSong: song,
        genre: trackData.genre || 'unknown',
        djname: trackData.djname || 'PULSE FM',
        addedToLibrary: now,
        firstPlayed: now,
        isNew: true,
        port: trackData.port || '',
        listeners: trackData.listeners || 0,
        playCount: 1
      });
      
      console.log(`‚ú® –ù–æ–≤—ã–π —Ç—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${artist} - ${title}`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫
      await db.collection('new_tracks').doc(trackId).update({
        lastPlayed: now,
        listeners: trackData.listeners || 0,
        playCount: admin.firestore.FieldValue.increment(1)
      });
      
      console.log(`üîÑ –¢—Ä–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: ${artist} - ${title}`);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        message: 'Track processed successfully',
        track: { artist, title, trackId },
        isNew: !existingNewTrack.exists
      })
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        success: false,
        error: error.message
      })
    };
  }
};
