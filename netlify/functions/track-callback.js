const admin = require('firebase-admin');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let firebaseInitialized = false;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase
function initializeFirebase() {
    if (firebaseInitialized || admin.apps.length > 0) {
        return true;
    }
    
    try {
        const privateKey = process.env.FIREBASE_PRIVATE_KEY;
        const clientEmail = process.env.FIREBASE_CLIENT_EMAIL;
        
        if (!privateKey || !clientEmail) {
            throw new Error('Missing Firebase credentials');
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–∞
        let cleanKey = privateKey.replace(/\\n/g, '\n');
        
        admin.initializeApp({
            credential: admin.credential.cert({
                projectId: "pulse-fm-84a48",
                privateKey: cleanKey,
                clientEmail: clientEmail,
            })
        });
        
        firebaseInitialized = true;
        console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
        
    } catch (error) {
        console.error('‚ùå Firebase –æ—à–∏–±–∫–∞:', error);
        return false;
    }
}

// –ö—ç—à —Ç—Ä–µ–∫–æ–≤
let knownTracks = new Set();
let cacheLoaded = false;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞
async function loadCache() {
    if (cacheLoaded) return;
    
    try {
        const db = admin.firestore();
        const snapshot = await db.collection('known_tracks').select('trackId').get();
        
        knownTracks.clear();
        snapshot.forEach(doc => {
            knownTracks.add(doc.data().trackId);
        });
        
        cacheLoaded = true;
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${knownTracks.size} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞:', error);
        cacheLoaded = true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫—ç—à–∞
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ ID —Ç—Ä–µ–∫–∞
function createTrackId(artist, title) {
    const clean = (text) => (text || '').toLowerCase().trim().replace(/[^\w\s\u0400-\u04FF]/g, '').replace(/\s+/g, '_');
    return `${clean(artist)}_${clean(title)}`;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–∫–∞
function isValidTrack(data) {
    if (!data) return false;
    
    const artist = (data.artist || '').trim();
    const title = (data.title || '').trim();
    
    if (!artist || !title) return false;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const blacklist = ['—Ä–µ–∫–ª–∞–º–∞', '–¥–∂–∏–Ω–≥–ª', '–ø–æ–∑—ã–≤–Ω—ã–µ', 'promo', 'jingle'];
    const text = `${artist} ${title}`.toLowerCase();
    
    return !blacklist.some(word => text.includes(word));
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è Netlify
exports.handler = async (event, context) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Content-Type': 'application/json'
    };
    
    // OPTIONS –∑–∞–ø—Ä–æ—Å
    if (event.httpMethod === 'OPTIONS') {
        return { statusCode: 200, headers, body: '' };
    }
    
    try {
        console.log('üì® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', event.httpMethod);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if (!initializeFirebase()) {
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ error: 'Firebase initialization failed' })
            };
        }
        
        await loadCache();
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞
        let trackData = {};
        
        if (event.httpMethod === 'POST' && event.body) {
            try {
                trackData = JSON.parse(event.body);
            } catch (e) {
                console.log('–ù–µ JSON –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ query string');
                // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ form data
                const params = new URLSearchParams(event.body);
                trackData = Object.fromEntries(params);
            }
        } else if (event.httpMethod === 'GET') {
            trackData = event.queryStringParameters || {};
        }
        
        console.log('üìù –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞:', trackData);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!isValidTrack(trackData)) {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ 
                    error: 'Invalid track data', 
                    received: trackData 
                })
            };
        }
        
        const artist = trackData.artist.trim();
        const title = trackData.title.trim();
        const trackId = createTrackId(artist, title);
        
        console.log(`üéµ –¢—Ä–µ–∫: "${artist} - ${title}"`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–∏–∑–Ω—ã
        if (!knownTracks.has(trackId)) {
            console.log('üÜï –ù–û–í–´–ô –¢–†–ï–ö!');
            
            knownTracks.add(trackId);
            
            const db = admin.firestore();
            const timestamp = admin.firestore.FieldValue.serverTimestamp();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫
            await db.collection('known_tracks').doc(trackId).set({
                trackId,
                artist,
                title,
                firstSeen: timestamp
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤–∏–Ω–∫–∏
            await db.collection('new_tracks').add({
                artist,
                title,
                trackId,
                addedToLibrary: timestamp,
                firstPlayed: timestamp,
                source: 'myradio24'
            });
            
            console.log(`‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${artist} - ${title}`);
            
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ 
                    success: true, 
                    message: 'New track added',
                    track: { artist, title, trackId },
                    isNew: true
                })
            };
            
        } else {
            console.log('‚ÑπÔ∏è –¢—Ä–µ–∫ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω');
            
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ 
                    success: true, 
                    message: 'Track already known',
                    track: { artist, title, trackId },
                    isNew: false
                })
            };
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ 
                error: 'Server error',
                message: error.message
            })
        };
    }
};
