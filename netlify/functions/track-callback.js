const admin = require('firebase-admin');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let firebaseInitialized = false;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase —á–µ—Ä–µ–∑ JSON
function initializeFirebase() {
    if (firebaseInitialized || admin.apps.length > 0) {
        console.log('‚úÖ Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    }
    
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        const serviceAccountJson = process.env.FIREBASE_SERVICE_ACCOUNT;
        
        if (!serviceAccountJson) {
            throw new Error('FIREBASE_SERVICE_ACCOUNT environment variable not found');
        }
        
        console.log('üìù Service account JSON –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞:', serviceAccountJson.length);
        
        // –ü–∞—Ä—Å–∏–º JSON
        let serviceAccount;
        try {
            serviceAccount = JSON.parse(serviceAccountJson);
            console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');
            console.log('üìã Project ID:', serviceAccount.project_id);
            console.log('üìã Client Email:', serviceAccount.client_email);
        } catch (parseError) {
            throw new Error(`Failed to parse service account JSON: ${parseError.message}`);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase Admin SDK
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            projectId: serviceAccount.project_id
        });
        
        firebaseInitialized = true;
        console.log('‚úÖ Firebase Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error.message);
        console.error('‚ùå Stack trace:', error.stack);
        return false;
    }
}

// –ö—ç—à –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
let knownTracks = new Set();
let cacheLoaded = false;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
async function loadCache() {
    if (cacheLoaded) {
        console.log('‚ÑπÔ∏è –ö—ç—à —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
    }
    
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤...');
        
        const db = admin.firestore();
        const snapshot = await db.collection('known_tracks').select('trackId').get();
        
        knownTracks.clear();
        snapshot.forEach(doc => {
            const data = doc.data();
            if (data.trackId) {
                knownTracks.add(data.trackId);
            }
        });
        
        cacheLoaded = true;
        console.log(`‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω: ${knownTracks.size} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –∫—ç—à–∞
        cacheLoaded = true;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Ç—Ä–µ–∫–∞
function createTrackId(artist, title) {
    const normalizeText = (text) => {
        return (text || '')
            .toLowerCase()
            .trim()
            .replace(/[^\w\s\u0400-\u04FF]/g, '') // –û—Å—Ç–∞–≤–ª—è–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –∫–∏—Ä–∏–ª–ª–∏—Ü—É
            .replace(/\s+/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            .replace(/_{2,}/g, '_') // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            .replace(/^_|_$/g, ''); // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    };
    
    const cleanArtist = normalizeText(artist);
    const cleanTitle = normalizeText(title);
    
    return `${cleanArtist}_${cleanTitle}`;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞
function isValidTrack(data) {
    if (!data || typeof data !== 'object') {
        return false;
    }
    
    const artist = (data.artist || '').trim();
    const title = (data.title || '').trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (!artist || !title) {
        console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞');
        return false;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const blacklist = ['—Ä–µ–∫–ª–∞–º–∞', '–¥–∂–∏–Ω–≥–ª', '–ø–æ–∑—ã–≤–Ω—ã–µ', 'promo', 'jingle', 'id', 'commercial'];
    const fullText = `${artist} ${title}`.toLowerCase();
    
    for (const word of blacklist) {
        if (fullText.includes(word)) {
            console.log(`‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${word}`);
            return false;
        }
    }
    
    return true;
}

// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è Netlify Functions
exports.handler = async (event, context) => {
    console.log('üöÄ === –ù–û–í–´–ô –ó–ê–ü–†–û–° –ö TRACK-CALLBACK ===');
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Content-Type': 'application/json'
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
    if (event.httpMethod === 'OPTIONS') {
        console.log('üì® OPTIONS –∑–∞–ø—Ä–æ—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏');
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }
    
    try {
        console.log('üì® –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', event.httpMethod);
        console.log('üì® –ü—É—Ç—å:', event.path);
        console.log('üì® Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', event.queryStringParameters);
        console.log('üì® –ó–∞–≥–æ–ª–æ–≤–∫–∏:', event.headers);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        if (!initializeFirebase()) {
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({
                    error: 'Firebase initialization failed',
                    timestamp: new Date().toISOString()
                })
            };
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        await loadCache();
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        let trackData = {};
        
        if (event.httpMethod === 'POST') {
            if (event.body) {
                console.log('üìù POST body:', event.body);
                
                try {
                    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                    trackData = JSON.parse(event.body);
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –∫–∞–∫ JSON');
                } catch (jsonError) {
                    console.log('‚ö†Ô∏è –ù–µ JSON –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ form data');
                    
                    // –ü—Ä–æ–±—É–µ–º –∫–∞–∫ URL-encoded –¥–∞–Ω–Ω—ã–µ
                    try {
                        const params = new URLSearchParams(event.body);
                        trackData = Object.fromEntries(params);
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –∫–∞–∫ form data');
                    } catch (formError) {
                        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å');
                        trackData = { raw: event.body };
                    }
                }
            } else {
                console.log('‚ö†Ô∏è POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ body');
                trackData = {};
            }
        } else if (event.httpMethod === 'GET') {
            trackData = event.queryStringParameters || {};
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
        } else {
            return {
                statusCode: 405,
                headers,
                body: JSON.stringify({ error: 'Method not allowed' })
            };
        }
        
        console.log('üìù –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞:', trackData);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞
        if (!isValidTrack(trackData)) {
            console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞');
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ 
                    error: 'Invalid track data',
                    received: trackData,
                    timestamp: new Date().toISOString()
                })
            };
        }
        
        const artist = trackData.artist.trim();
        const title = trackData.title.trim();
        const trackId = createTrackId(artist, title);
        
        console.log(`üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫: "${artist} - ${title}"`);
        console.log(`üîë Track ID: ${trackId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ —Ç—Ä–µ–∫
        if (!knownTracks.has(trackId)) {
            console.log('üÜï –ù–ê–ô–î–ï–ù –ù–û–í–´–ô –¢–†–ï–ö!');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
            knownTracks.add(trackId);
            
            const db = admin.firestore();
            const timestamp = admin.firestore.FieldValue.serverTimestamp();
            
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫
                await db.collection('known_tracks').doc(trackId).set({
                    trackId: trackId,
                    artist: artist,
                    title: title,
                    firstSeen: timestamp,
                    createdAt: new Date().toISOString()
                });
                
                console.log('‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ known_tracks');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–æ–≤–∏–Ω–æ–∫
                await db.collection('new_tracks').add({
                    artist: artist,
                    title: title,
                    trackId: trackId,
                    addedToLibrary: timestamp,
                    firstPlayed: timestamp,
                    source: 'myradio24_callback',
                    createdAt: new Date().toISOString()
                });
                
                console.log('‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ new_tracks');
                
            } catch (dbError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É:', dbError);
                throw dbError;
            }
            
            console.log(`üéâ –ù–æ–≤—ã–π —Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${artist} - ${title}`);
            
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ 
                    success: true, 
                    message: 'New track added successfully',
                    track: { 
                        artist: artist, 
                        title: title, 
                        trackId: trackId 
                    },
                    isNew: true,
                    timestamp: new Date().toISOString()
                })
            };
            
        } else {
            console.log('‚ÑπÔ∏è –¢—Ä–µ–∫ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ 
                    success: true, 
                    message: 'Track already known',
                    track: { 
                        artist: artist, 
                        title: title, 
                        trackId: trackId 
                    },
                    isNew: false,
                    timestamp: new Date().toISOString()
                })
            };
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', error);
        
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ 
                error: 'Internal server error',
                message: error.message,
                timestamp: new Date().toISOString()
            })
        };
    }
};
