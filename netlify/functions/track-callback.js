const admin = require('firebase-admin');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let firebaseInitialized = false;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase
function initializeFirebase() {
    if (firebaseInitialized || admin.apps.length > 0) {
        return true;
    }
    
    try {
        const serviceAccountJson = process.env.FIREBASE_SERVICE_ACCOUNT;
        
        if (!serviceAccountJson) {
            throw new Error('Missing Firebase Service Account');
        }
        
        const serviceAccount = JSON.parse(serviceAccountJson);
        
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            projectId: serviceAccount.project_id
        });
        
        firebaseInitialized = true;
        console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
        
    } catch (error) {
        console.error('‚ùå Firebase –æ—à–∏–±–∫–∞:', error);
        return false;
    }
}

// –ö—ç—à —Ç—Ä–µ–∫–æ–≤
let knownTracks = new Set();
let cacheLoaded = false;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞
async function loadCache() {
    if (cacheLoaded) return;
    
    try {
        const db = admin.firestore();
        const snapshot = await db.collection('known_tracks').select('trackId').get();
        
        knownTracks.clear();
        snapshot.forEach(doc => {
            knownTracks.add(doc.data().trackId);
        });
        
        cacheLoaded = true;
        console.log(`‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω: ${knownTracks.size} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞:', error);
        cacheLoaded = true;
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–∫–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è myradio24)
function parseTrackData(data) {
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö myradio24:', JSON.stringify(data, null, 2));
    
    let artist = '';
    let title = '';
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü–æ–ª–µ song (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ)
    if (data.song && data.song !== data.title) {
        const trackParts = data.song.split(' - ');
        if (trackParts.length >= 2) {
            artist = trackParts[0].trim();
            title = trackParts.slice(1).join(' - ').trim();
            console.log('‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –§–æ—Ä–º–∞—Ç song –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–¥–µ–ª–µ–Ω –ø–æ " - "');
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è " - ", –∏—Å–ø–æ–ª—å–∑—É–µ–º artist –∏ title –æ—Ç–¥–µ–ª—å–Ω–æ
            if (data.artist && data.title && data.title !== 'PULSE FM') {
                artist = data.artist;
                title = data.title;
                console.log('‚úÖ Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º artist/title');
            }
        }
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –§–æ—Ä–º–∞—Ç myradio24: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è artist –∏ songtitle
    else if (data.artist && data.songtitle && data.songtitle !== 'PULSE FM') {
        artist = data.artist;
        title = data.songtitle;
        console.log('‚úÖ –§–æ—Ä–º–∞—Ç myradio24 artist/songtitle –Ω–∞–π–¥–µ–Ω');
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: artist –∏ title (–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ title –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏)
    else if (data.artist && data.title && data.title !== 'PULSE FM' && data.title !== data.djname) {
        artist = data.artist;
        title = data.title;
        console.log('‚úÖ –§–æ—Ä–º–∞—Ç artist/title –Ω–∞–π–¥–µ–Ω');
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –§–æ—Ä–º–∞—Ç —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º song
    else if (data.song) {
        const trackParts = data.song.split(' - ');
        if (trackParts.length >= 2) {
            artist = trackParts[0].trim();
            title = trackParts.slice(1).join(' - ').trim();
            console.log('‚úÖ –§–æ—Ä–º–∞—Ç song –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–¥–µ–ª–µ–Ω –ø–æ " - "');
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è " - ", –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            const altSeparators = [' ‚Äì ', ' ‚Äî ', ' | ', ' / '];
            for (const sep of altSeparators) {
                const parts = data.song.split(sep);
                if (parts.length >= 2) {
                    artist = parts[0].trim();
                    title = parts.slice(1).join(sep).trim();
                    console.log(`‚úÖ –§–æ—Ä–º–∞—Ç song –Ω–∞–π–¥–µ–Ω —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º "${sep}"`);
                    break;
                }
            }
        }
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: –§–æ—Ä–º–∞—Ç nowplaying
    else if (data.nowplaying) {
        const trackParts = data.nowplaying.split(' - ');
        if (trackParts.length >= 2) {
            artist = trackParts[0].trim();
            title = trackParts.slice(1).join(' - ').trim();
            console.log('‚úÖ –§–æ—Ä–º–∞—Ç nowplaying –Ω–∞–π–¥–µ–Ω');
        }
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 6: –§–æ—Ä–º–∞—Ç track
    else if (data.track) {
        const trackParts = data.track.split(' - ');
        if (trackParts.length >= 2) {
            artist = trackParts[0].trim();
            title = trackParts.slice(1).join(' - ').trim();
            console.log('‚úÖ –§–æ—Ä–º–∞—Ç track –Ω–∞–π–¥–µ–Ω');
        }
    }
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç HTML-–∫–æ–¥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    artist = decodeHtmlEntities(artist.trim());
    title = decodeHtmlEntities(title.trim());
    
    console.log(`üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: "${artist}" - "${title}"`);
    
    return { artist, title };
}

// –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è HTML-—Å—É—â–Ω–æ—Å—Ç–µ–π
function decodeHtmlEntities(text) {
    const entities = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#039;': "'",
        '&nbsp;': ' '
    };
    
    return text.replace(/&[a-zA-Z0-9#]+;/g, (entity) => {
        return entities[entity] || entity;
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ ID —Ç—Ä–µ–∫–∞
function createTrackId(artist, title) {
    const clean = (text) => (text || '')
        .toLowerCase()
        .trim()
        .replace(/[^\w\s\u0400-\u04FF]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        .replace(/\s+/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        .replace(/_{2,}/g, '_') // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        .replace(/^_|_$/g, ''); // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    
    return `${clean(artist)}_${clean(title)}`;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–∫–∞
function isValidTrack(artist, title) {
    if (!artist || !title) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if (artist.length < 2 || title.length < 2) {
        console.log('‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ');
        return false;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const blacklist = [
        '—Ä–µ–∫–ª–∞–º–∞', '–¥–∂–∏–Ω–≥–ª', '–ø–æ–∑—ã–≤–Ω—ã–µ', 'promo', 'jingle', 'commercial', 'advertisement',
        'station id', 'radio id', '–∞–Ω–æ–Ω—Å', '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'reklama', 'reclama',
        'podcast', '–ø–æ–¥–∫–∞—Å—Ç', '–º—É–∑–≥–æ—Å—Ç', 'dj set', 'mix set', 'radio show'
    ];
    
    const text = `${artist} ${title}`.toLowerCase();
    
    for (const word of blacklist) {
        if (text.includes(word)) {
            console.log(`‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${word}`);
            return false;
        }
    }
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
    return true;
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
exports.handler = async (event, context) => {
    const startTime = Date.now();
    console.log('üöÄ === CALLBACK –û–¢ MYRADIO24 ===');
    console.log('üìÖ –í—Ä–µ–º—è:', new Date().toISOString());
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE',
        'Content-Type': 'application/json'
    };
    
    // OPTIONS –∑–∞–ø—Ä–æ—Å
    if (event.httpMethod === 'OPTIONS') {
        console.log('üì® OPTIONS –∑–∞–ø—Ä–æ—Å');
        return { statusCode: 200, headers, body: '' };
    }
    
    try {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('üìä HTTP Method:', event.httpMethod);
        console.log('üìä Query Params:', JSON.stringify(event.queryStringParameters, null, 2));
        console.log('üìä Body:', event.body);
        console.log('üìä Headers:', JSON.stringify(event.headers, null, 2));
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        if (!initializeFirebase()) {
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ 
                    error: 'Firebase initialization failed',
                    timestamp: new Date().toISOString()
                })
            };
        }
        
        await loadCache();
        
        // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞
        let trackData = {};
        
        if (event.httpMethod === 'POST') {
            console.log('üì® POST –∑–∞–ø—Ä–æ—Å –æ—Ç myradio24');
            
            if (event.body) {
                try {
                    // –ü—Ä–æ–±—É–µ–º JSON
                    trackData = JSON.parse(event.body);
                    console.log('‚úÖ JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', trackData);
                } catch (jsonError) {
                    console.log('‚ö†Ô∏è –ù–µ JSON, –ø—Ä–æ–±—É–µ–º URL-encoded');
                    
                    try {
                        // URL-encoded
                        const params = new URLSearchParams(event.body);
                        trackData = Object.fromEntries(params);
                        console.log('‚úÖ URL-encoded –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', trackData);
                    } catch (urlError) {
                        console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
                        trackData = { raw_body: event.body };
                    }
                }
            } else {
                console.log('‚ö†Ô∏è POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ body');
            }
            
        } else if (event.httpMethod === 'GET') {
            console.log('üì® GET –∑–∞–ø—Ä–æ—Å');
            trackData = event.queryStringParameters || {};
        }
        
        console.log('üéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', JSON.stringify(trackData, null, 2));
        
        // –ü–∞—Ä—Å–∏–º —Ç—Ä–µ–∫
        const { artist, title } = parseTrackData(trackData);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        const response = {
            success: true,
            timestamp: new Date().toISOString(),
            processing_time_ms: Date.now() - startTime,
            data: {
                method: event.httpMethod,
                received: trackData,
                parsed: { artist, title }
            }
        };
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
        if (isValidTrack(artist, title)) {
            const trackId = createTrackId(artist, title);
            
            console.log(`üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫: "${artist} - ${title}" (ID: ${trackId})`);
            
            if (!knownTracks.has(trackId)) {
                console.log('üÜï –ù–û–í–´–ô –¢–†–ï–ö –û–ë–ù–ê–†–£–ñ–ï–ù!');
                
                try {
                    knownTracks.add(trackId);
                    
                    const db = admin.firestore();
                    const timestamp = admin.firestore.FieldValue.serverTimestamp();
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫
                    await db.collection('known_tracks').doc(trackId).set({
                        trackId,
                        artist,
                        title,
                        firstSeen: timestamp,
                        source: 'myradio24_callback'
                    });
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤–∏–Ω–∫–∏
                    await db.collection('new_tracks').add({
                        artist,
                        title,
                        trackId,
                        addedToLibrary: timestamp,
                        firstPlayed: timestamp,
                        source: 'myradio24_callback',
                        radioStation: 'PULSE FM'
                    });
                    
                    console.log(`‚úÖ –ù–æ–≤—ã–π —Ç—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É: ${artist} - ${title}`);
                    
                    response.result = 'new_track_added';
                    response.track = { artist, title, trackId };
                    response.message = `–ù–æ–≤—ã–π —Ç—Ä–µ–∫ "${artist} - ${title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –Ω–æ–≤–∏–Ω–æ–∫!`;
                    
                } catch (dbError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É:', dbError);
                    response.result = 'database_error';
                    response.error = dbError.message;
                }
                
            } else {
                console.log('‚ÑπÔ∏è –¢—Ä–µ–∫ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–∏—Å—Ç–µ–º–µ');
                response.result = 'track_known';
                response.track = { artist, title, trackId };
                response.message = `–¢—Ä–µ–∫ "${artist} - ${title}" —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–∏—Å—Ç–µ–º–µ`;
            }
        } else {
            console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
            response.result = 'validation_failed';
            response.message = '–¢—Ä–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)';
        }
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', response.result);
        
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify(response, null, 2)
        };
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ 
                error: 'Internal server error',
                message: error.message,
                timestamp: new Date().toISOString()
            })
        };
    }
};
