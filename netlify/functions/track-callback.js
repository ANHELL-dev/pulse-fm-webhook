const admin = require('firebase-admin');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let firebaseInitialized = false;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase
function initializeFirebase() {
    if (firebaseInitialized || admin.apps.length > 0) {
        return true;
    }
    
    try {
        const serviceAccountJson = process.env.FIREBASE_SERVICE_ACCOUNT;
        
        if (!serviceAccountJson) {
            throw new Error('Missing Firebase Service Account');
        }
        
        const serviceAccount = JSON.parse(serviceAccountJson);
        
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            projectId: serviceAccount.project_id
        });
        
        firebaseInitialized = true;
        console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
        
    } catch (error) {
        console.error('‚ùå Firebase –æ—à–∏–±–∫–∞:', error);
        return false;
    }
}

// –ö—ç—à —Ç—Ä–µ–∫–æ–≤
let knownTracks = new Set();
let cacheLoaded = false;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞
async function loadCache() {
    if (cacheLoaded) return;
    
    try {
        const db = admin.firestore();
        const snapshot = await db.collection('known_tracks').select('trackId').get();
        
        knownTracks.clear();
        snapshot.forEach(doc => {
            knownTracks.add(doc.data().trackId);
        });
        
        cacheLoaded = true;
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${knownTracks.size} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞:', error);
        cacheLoaded = true;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ ID —Ç—Ä–µ–∫–∞
function createTrackId(artist, title) {
    const clean = (text) => (text || '').toLowerCase().trim().replace(/[^\w\s\u0400-\u04FF]/g, '').replace(/\s+/g, '_');
    return `${clean(artist)}_${clean(title)}`;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–∫–∞
function isValidTrack(data) {
    if (!data || typeof data !== 'object') {
        console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±—ä–µ–∫—Ç:', typeof data, data);
        return false;
    }
    
    const artist = (data.artist || '').trim();
    const title = (data.title || '').trim();
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:');
    console.log('- artist:', `"${artist}" (length: ${artist.length})`);
    console.log('- title:', `"${title}" (length: ${title.length})`);
    
    if (!artist || !title) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ');
        return false;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const blacklist = ['—Ä–µ–∫–ª–∞–º–∞', '–¥–∂–∏–Ω–≥–ª', '–ø–æ–∑—ã–≤–Ω—ã–µ', 'promo', 'jingle'];
    const text = `${artist} ${title}`.toLowerCase();
    
    for (const word of blacklist) {
        if (text.includes(word)) {
            console.log(`‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${word}`);
            return false;
        }
    }
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
    return true;
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
exports.handler = async (event, context) => {
    console.log('üöÄ === –ù–û–í–´–ô CALLBACK –ó–ê–ü–†–û–° ===');
    console.log('üìÖ –í—Ä–µ–º—è:', new Date().toISOString());
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE',
        'Content-Type': 'application/json'
    };
    
    // OPTIONS –∑–∞–ø—Ä–æ—Å
    if (event.httpMethod === 'OPTIONS') {
        console.log('üì® OPTIONS –∑–∞–ø—Ä–æ—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º CORS');
        return { statusCode: 200, headers, body: '' };
    }
    
    try {
        // –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–Ø–©–ò–• –î–ê–ù–ù–´–•
        console.log('üìä === –ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–ê ===');
        console.log('üî∏ HTTP Method:', event.httpMethod);
        console.log('üî∏ Path:', event.path);
        console.log('üî∏ Query String Parameters:', JSON.stringify(event.queryStringParameters, null, 2));
        console.log('üî∏ Headers:', JSON.stringify(event.headers, null, 2));
        console.log('üî∏ Body (raw):', event.body);
        console.log('üî∏ Body type:', typeof event.body);
        console.log('üî∏ Body length:', event.body ? event.body.length : 0);
        console.log('üî∏ IsBase64Encoded:', event.isBase64Encoded);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        if (!initializeFirebase()) {
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ error: 'Firebase initialization failed' })
            };
        }
        
        await loadCache();
        
        // –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–• –¢–†–ï–ö–ê
        let trackData = {};
        
        console.log('üìù === –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–• ===');
        
        if (event.httpMethod === 'POST') {
            console.log('üì® POST –∑–∞–ø—Ä–æ—Å');
            
            if (event.body) {
                console.log('üìÑ Body —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', event.body);
                
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                try {
                    // JSON —Ñ–æ—Ä–º–∞—Ç
                    trackData = JSON.parse(event.body);
                    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∫–∞–∫ JSON:', trackData);
                } catch (jsonError) {
                    console.log('‚ö†Ô∏è –ù–µ JSON, –ø—Ä–æ–±—É–µ–º URL-encoded');
                    
                    try {
                        // URL-encoded —Ñ–æ—Ä–º–∞—Ç
                        const params = new URLSearchParams(event.body);
                        trackData = Object.fromEntries(params);
                        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∫–∞–∫ URL-encoded:', trackData);
                    } catch (urlError) {
                        console.log('‚ö†Ô∏è –ù–µ URL-encoded, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
                        
                        // –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                        if (event.body.includes('=')) {
                            // –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ key=value&key2=value2
                            trackData = {};
                            event.body.split('&').forEach(pair => {
                                const [key, value] = pair.split('=');
                                if (key && value) {
                                    trackData[decodeURIComponent(key)] = decodeURIComponent(value);
                                }
                            });
                            console.log('‚úÖ –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ URL-encoded:', trackData);
                        } else {
                            console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç body');
                            trackData = { raw_body: event.body };
                        }
                    }
                }
            } else {
                console.log('‚ö†Ô∏è POST –±–µ–∑ body');
            }
            
        } else if (event.httpMethod === 'GET') {
            console.log('üì® GET –∑–∞–ø—Ä–æ—Å');
            trackData = event.queryStringParameters || {};
            console.log('üìÑ Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', trackData);
        }
        
        console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞:', JSON.stringify(trackData, null, 2));
        
        // –í–û–ó–í–†–ê–©–ê–ï–ú –ü–û–î–†–û–ë–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        const debugResponse = {
            success: true,
            message: 'Callback received for debugging',
            debug: {
                method: event.httpMethod,
                receivedData: trackData,
                hasArtist: !!(trackData.artist),
                hasTitle: !!(trackData.title),
                allKeys: Object.keys(trackData),
                queryParams: event.queryStringParameters,
                bodyLength: event.body ? event.body.length : 0,
                headers: event.headers
            },
            timestamp: new Date().toISOString()
        };
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –≤–∞–ª–∏–¥–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        if (isValidTrack(trackData)) {
            const artist = trackData.artist.trim();
            const title = trackData.title.trim();
            const trackId = createTrackId(artist, title);
            
            console.log(`üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: "${artist} - ${title}"`);
            
            if (!knownTracks.has(trackId)) {
                console.log('üÜï –ù–û–í–´–ô –¢–†–ï–ö!');
                
                knownTracks.add(trackId);
                
                const db = admin.firestore();
                const timestamp = admin.firestore.FieldValue.serverTimestamp();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º
                await db.collection('known_tracks').doc(trackId).set({
                    trackId,
                    artist,
                    title,
                    firstSeen: timestamp
                });
                
                await db.collection('new_tracks').add({
                    artist,
                    title,
                    trackId,
                    addedToLibrary: timestamp,
                    firstPlayed: timestamp,
                    source: 'myradio24'
                });
                
                console.log(`‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${artist} - ${title}`);
                
                debugResponse.trackProcessed = true;
                debugResponse.track = { artist, title, trackId };
                debugResponse.isNew = true;
                
            } else {
                console.log('‚ÑπÔ∏è –¢—Ä–µ–∫ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω');
                debugResponse.trackProcessed = true;
                debugResponse.track = { artist, title, trackId };
                debugResponse.isNew = false;
            }
        } else {
            console.log('‚ùå –¢—Ä–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
            debugResponse.trackProcessed = false;
            debugResponse.validationFailed = true;
        }
        
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify(debugResponse, null, 2)
        };
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ 
                error: 'Server error',
                message: error.message,
                debug: {
                    method: event.httpMethod,
                    body: event.body,
                    queryParams: event.queryStringParameters
                }
            })
        };
    }
};
